version: 2.1
orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
  aws-ecs: circleci/aws-ecs@1.3.0

jobs:

  build_and_deploy_backend:
    docker:
      - image: circleci/openjdk:8-jdk

    environment:
      ECR_REPOSITORY_NAME: septproject
      FULL_IMAGE_NAME_BACKEND: 286824662367.dkr.ecr.us-east-1.amazonaws.com/septproject:latest
    steps:
      - checkout
      - setup_remote_docker

      #- run:
      #    name: Setup common environment variables
      #    command: |
      #      echo 'export ECR_REPOSITORY_NAME="${AWS_RESOURCE_NAME_PREFIX}"' >> $BASH_ENV
      #      echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:latest"' >> $BASH_ENV

      - run:
          name: Generate cumulative pom.xml checksum
          command: |
            find . -type f -name "pom.xml" -exec sh -c "sha256sum {} >> ~/pom-checksum.tmp" \;
            sort -o ~/pom-checksum ~/pom-checksum.tmp
          when: always

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - circleci-demo-java-spring-{{ checksum "~/pom-checksum" }}
            - circleci-demo-java-spring-

      - run: (cd BackEnd && mvn dependency:go-offline) # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-demo-java-spring-{{ checksum "~/pom-checksum" }}

      - run: (cd BackEnd && mvn package) # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: BackEnd/target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/group4tues1430-0.0.1-SNAPSHOT.jar
        # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples

      - run:
          name: Install dependencies for AWS
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            sudo apt-get install python3-pip
            sudo pip3 install --upgrade awscli
      - run:
          name: Build BackEnd image
          command: |
            cd BackEnd
            docker build -t $FULL_IMAGE_NAME_BACKEND .
      - run:
          name: Push BackEnd image
          command: |
            cd BackEnd
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME_BACKEND

  build_and_deploy_frontend:
    docker:
      - image: circleci/node:10.14.2

    environment:
      ECR_REPOSITORY_NAME: septprojectfrontend
      FULL_IMAGE_NAME_FRONTEND: 286824662367.dkr.ecr.us-east-1.amazonaws.com/septprojectfrontend:latest
    steps:
      - checkout
      - run: (cd FrontEnd && yarn install)
      - run: (cd FrontEnd && yarn test)
      - setup_remote_docker

      - run:
          name: Install dependencies for AWS
          command: |
            sudo apt-get update
            sudo apt-get -y -qq install awscli
            sudo apt-get install python3-pip
            sudo pip3 install --upgrade awscli

      - run:
          name: Build Frontend image
          command: |
            cd FrontEnd
            docker build -t $FULL_IMAGE_NAME_FRONTEND .

      - run:
          name: Push Frontend image
          command: |
            cd FrontEnd
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME_FRONTEND

  # to test frontend
  frontend:
    docker:
      - image: circleci/node:10.14.2 #circleci/node:10.8.0

    working_directory: ~/project/FrontEnd
    steps:
      - checkout
      - run: (cd FrontEnd && yarn install)
      - run: (cd FrontEnd && yarn test)

  # to test backend when pushing to branches other than master
  backend:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/project/BackEnd
    steps:
      - checkout
      - run:
          name: Generate cumulative pom.xml checksum
          command: |
            find . -type f -name "pom.xml" -exec sh -c "sha256sum {} >> ~/pom-checksum.tmp" \;
            sort -o ~/pom-checksum ~/pom-checksum.tmp
          when: always

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - circleci-demo-java-spring-{{ checksum "~/pom-checksum" }}
            - circleci-demo-java-spring-

      - run: (cd BackEnd && mvn dependency:go-offline) # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: circleci-demo-java-spring-{{ checksum "~/pom-checksum" }}

      - run: (cd BackEnd && mvn package) # run the actual tests

      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: BackEnd/target/surefire-reports

      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/group4tues1430-0.0.1-SNAPSHOT.jar
          # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples


workflows:
  build-deploy-qa:
    jobs:
      - build_and_deploy_backend:
          filters:
            branches:
              only: master
      - build_and_deploy_frontend:
          filters:
            branches:
              only: master
      - frontend
      - backend
